[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1440
PlayResY: 860

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: D:/Downloads/Telegram Desktop/电脑批量测试【原创首发】/新建文件夹/将两个单m的绘图的结构统一.mp4
Video File: D:/Downloads/Telegram Desktop/电脑批量测试【原创首发】/新建文件夹/将两个单m的绘图的结构统一.mp4
Video AR Mode: 4
Video AR Value: 1.674419
Video Zoom Percent: 0.750000
Scroll Position: 17
Active Line: 17
Video Position: 11930

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,更纱黑体 SC Semibold,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:03.08,0:02:06.33,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\pos(376.983,20.573)}m 59 67 l 821 65 818 85 62 85
Dialogue: 0,0:03:40.78,0:10:41.06,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\pos(376.983,20.573)}m 59 67 l 821 65 818 85 62 85
Dialogue: 0,0:12:33.23,0:14:12.81,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\pos(376.983,20.573)}m 59 67 l 821 65 818 85 62 85
Dialogue: 0,0:14:45.54,0:15:01.48,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\pos(376.983,20.573)}m 59 67 l 821 65 818 85 62 85
Dialogue: 0,0:00:00.00,0:00:24.51,Default,,0,0,0,,对于任意两个"标准"的绘图代码,怎么将它们的结构变为一样的呢？其实解决这个只要能做到使两个\N单m的绘图结构统一就差不多了。因为如果两个绘图m数量不同,最后再补上该补的m即可。所以先\N来介绍如何统一两个单m的绘图的结构
Dialogue: 0,0:00:24.51,0:02:05.31,Default,,0,0,0,,{\fs33}首先这个check_lb函数两个参数，s1和s2填的都必须是绘图命令片段，比如填"l 23 6 "比如填"b 0 2 4 7 11 50 "\N所以这个函数这里的目的是作为辅助函数。为什么需要这个呢：\N比如两个单m绘图"m 0 0 l 3 1 l 3 4"和"m -12 0 l -6 9 b -2 8 2 7 6 6 l 13 -1"要怎么使它们结构一样？\N如果两个绘图结构一样的话，那么它们的绘图命令应该能够完全一一对应吧,所以现在看第一个绘图的第一个命令片段是\N"m 0 0 "其结构能够对应上第二个绘图的第一个命令片段"m -12 0 "，然后再看第一个绘图第2个片段"l 3 1 "的结构也能\N和第二个绘图第二个片段"l -6 9 "对应上，继续,第一个绘图第3个片段"l 3 4 "就不能和第二个绘图第3个片\N段"b -2 8 2 7 6 6 "对应上了，然后第一个绘图没有第4个片段了，第二个绘图却有。所以分析一下，很简单，要统一\N两个单m绘图的话，是不是只需要它们的片段数量一样且片段形式一样？那总共就几种情况，因为是单m的，所以一开始\N的m肯定能对应上，所以不用考虑，只用考虑l和b能否对应：当l对应l时，对应成功；当b对应b时，对应成功；哎呀,那岂\N不是爽哉？只有"一种"情况会对应不上，就是一个是l一个是b的情况，比如刚才绘图1的片段3和绘图2的片段3一个是l一\N个是b，所以对应不上，反过来，若是绘图1某片段是b绘图2相应的片段是l，那么也是对应不上的，所以实际上主要就是\N解决“一个是l一个是b”这种对应不上的情况。
Dialogue: 0,0:02:05.31,0:02:39.38,Default,,0,0,0,,先是辅助函数check_lb嘛，输入两个片段。然后如果检测到一个是l一个是b，那么只需要把那个l的\N给变成b即可（注意这里的大前提是：在不改变两个绘图形状的情况下统一它们的结构）\N所以l变成b还不简单吗，这是送分题啊，比如"l 4 7 "变成b就是"b 4 7 4 7 4 7 "\N真是爽哉啊，牛肉蛋，啊不，黑椒牛肉蛋三明治？啊，黑椒牛肉/蛋三明治？黑椒牛肉/蛋/三明治??
Dialogue: 0,0:02:57.63,0:03:11.58,Default,,0,0,0,,现在来看看这个函数的效果，参数填两个片段
Dialogue: 0,0:03:11.58,0:03:33.15,Default,,0,0,0,,显然l就在其“形状”没有改变的情况下，变成了b\N听我解释啊，沁园真的有卖黑椒牛肉蛋三明治的，这，这乍一看不就是牛肉蛋吗
Dialogue: 0,0:03:33.15,0:03:52.25,Default,,0,0,0,,好了,有能够将两个片段统一的辅助函数以后，不就是可以将两个单m绘图的结构给统一了吗？现在\N只需要将两个单m绘图的片段分别拆出来即可，拆出来放在表里，然后一一对应的将其统一即可。
Dialogue: 0,0:03:54.31,0:04:05.99,Default,,0,0,0,,所以看下面一个函数。这个函数要求填两个单m的"标准"绘图字符串，然后函数将他们统一，最后\N返回两个统一后的单m绘图代码
Dialogue: 0,0:04:05.99,0:04:39.58,Default,,0,0,0,,这里稍微注意一点，一开始不是要把这两个单m绘图的每个片段给拆出来然后放表里吗，但是由于\N有的时候你可能输入的绘图代码最后没有一个空格，所以拆出来的片段最后有没有空格就不确定了\N所以把拆出来的片段gsub一下，把最后的空格替换成空，再连接一个空格，这样不管你拆出来的片\N段最后有没有空格，都能变成最后有一个空格这样子。
Dialogue: 0,0:04:47.45,0:04:54.35,Default,,0,0,0,,s1和s2就是分别用来装绘图1和绘图2的片段的
Dialogue: 0,0:04:54.35,0:05:01.15,Default,,0,0,0,,用gmatch匹配出片段、确保片段最后有且仅有一个空格、然后放进表里
Dialogue: 0,0:05:01.15,0:05:51.24,Default,,0,0,0,,[mlb][-. %d]*就是匹配命令片段,这个表达式能看懂吧。因为命令片段就是比如"m 11 2 "、"l 3 7 "\N这样的，或者"b 0 0 23 66 14 5 "这样的，所以肯定匹配mlb其中一种,然后后面接一堆数、空格、\N小数点、负号,所以肯定要[-. %d]+这种样子,注意[-. %d]+里面有空格别漏了。至于用+或者*影响\N不大，+是匹配一次或者多次，*是匹配0次或多次，但是啊，前面已经说了参数填"标准"的绘图代码\N了,所以不管是m或l或b后面肯定都有点的,不可能有直接m l 0 0 b b b 35 7这种字符串的。所以用\N+或者用*其实匹配出来的东西都该一样的，因为已经强制强制要求参数要填“标准”的绘图代码了
Dialogue: 0,0:05:51.24,0:06:22.28,Default,,0,0,0,,还有一点是，之前应该也讲过的，用""或者用''都是字符串,一样的,所以""是空字符串，而''也是空字\N符串。所以你想用""来表示一个字符串可以，想用''表示一个字符串也可以，比如'5irt0s.de'就是一\N个字符串
Dialogue: 0,0:06:46.98,0:07:11.31,Default,,0,0,0,,好了，有了两个绘图的片段以后怎么办呢？首先最简单的,如果拆出来两个绘图的命令片段数量一样\N的话，那么直接for循环一遍，把它们用刚刚讲的check_lb函数统一一下就好了,这样直接concat这\N两个表就能得到两个结构统一的绘图了
Dialogue: 0,0:07:11.31,0:07:55.24,Default,,0,0,0,,如果两个绘图的命令片段数目不同的话，可以比如先补齐，让s1和s2里的片段数量一样，然后再循\N环遍历，把他们的每个片段都相应地统一。当然现在视频里的方法就不太一样，是先把能统一的统\N一了，比如#s1如果大于#s2的话，说明s2里的片段数量少一些，就先把两个表里#s2这么多的片段\N给进行统一，然后s2里还需要加片段，就加l片段即可，当然加#s1-#s2个，然后补好后两个表片段\N数目就一样了，此时再把这后面的片段进行统一即可，因为前面的部分统一过了，不需要在统一了
Dialogue: 0,0:07:55.24,0:08:23.76,Default,,0,0,0,,注意#s2是表的长度，所以如果你s2长度变化了，那#s2也会跟着变化，所以如果你想知道一开始\N还没有往s2添加片段时的长度的话，就先设定一个len=#s2，这样就算后面往s2这个表里添加了很\N多东西以后，就算此时的#s2已经不一样了，但是你有len啊，你还能知道s2这个表在当年那个时候\N的长度是多少！
Dialogue: 0,0:08:23.76,0:09:05.91,Default,,0,0,0,,为什么比如s2的片段少，往里面加的就是l片段而不是b片段呢：因为l是最"简约"的片段，就算此时\N加的不该是l，那么反正在后面执行统一化操作后(即用了check_lb函数以后)它们就会该统一的统一\N所以如果该是b的自然会变成b，不用担心别的。\N举例如：m -12 0和m 0 0 l 5 3 l 3 5 b 3 7 4 9 4 11 这两个绘图，第一个差了3个命令片段对吧\N那么就先加上3个"l -12 0 "，然后统一起来才是最"简约"的，因为统一时，如果是l对应l，则不变,\N如果是l对应b，则把补的那个l变成b即可,而这统一的操作就是刚刚check_lb的任务而已,反正都要做
Dialogue: 0,0:09:05.91,0:09:19.91,Default,,0,0,0,,然后就是#s1比#s2小的情况了，这个当然和#s2比#s1小的情况是一个道理
Dialogue: 0,0:09:31.61,0:09:41.99,Default,,0,0,0,,然后s1、s2两个表里的命令片段都统一以后，连接这两个表就能得到两个结构一样的单m绘图了
Dialogue: 0,0:09:48.38,0:10:13.94,Default,,0,0,0,,当然之前上一次教程讲的“补的”方法是：不够的先补齐，然后再整个循环一个个统一结构，而这\N里是先统一表里一部分，然后再不够的补齐，然后再把剩下的统一。其实我喜欢之前视频讲的方法\N很明显先把表里不够的全部补足了，再来整个循环一次次把一个个片段都相应的统一，这方法肯定\N舒服一些啊
Dialogue: 0,0:10:13.94,0:10:22.99,Default,,0,0,0,,最后返回两个绘图代码，他们当然就是结构一样的单m绘图了
Dialogue: 0,0:11:22.04,0:11:34.99,Default,,0,0,0,,现在参数就填了任意的两个“标准”的单m绘图，然后函数当然就能把它们的结构给统一了
Dialogue: 0,0:11:34.99,0:12:09.99,Default,,0,0,0,,可以看到,这样统一结构就是最最精简的统一方式了，它不像之前教程那样，没有把两个绘图都全部\N变为b路径，然后再统一，而是直接统一绘图的结构，这样的话，就不会有一堆b了，就不会有那么\N大的文本量了,而是该有直线l的就是直线l，该用到b的就用b。此方法就以最简化文本量的方式将两\N个单m绘图的结构给统一了。（当然统一俩绘图的结构并没有改变它们本来的形状）
Dialogue: 0,0:13:01.04,0:14:10.21,Default,,0,0,0,,{\fs36}然后关于统一两个片段，比如统一"l 7 9 "和"b 0 0 23 66 5 8 "你可以选择两种方法：第一种匹配出"l 7 9 "中\N的"7 9"然后用string.rep重复3次"7 9".." "就得到了"7 9 7 9 7 9 "然后再在前面连接一个"b "即可。而第二种\N方法是，匹配出"l 7 9 "中的"7 9"然后用gsub，把"b 0 0 23 66 5 8 "这个字符串里的坐标都替换为"7 9"即可\N但是这里要说明的是，像这种“连接”起来很简单、很简短的字符串，就不要用gsub替换得到了，虽然gsub\N可以得到同样的东西，但是你只需要这么短一个字符串，如果用gsub的话，反倒会让执行速度变慢,你肯定希\N望这些代码执行速度越快越好吧，所以要产生这样的字符串现在用string.rep就行了，不要用gsub，当然之前\N讲过string.rep的，它是用来重复连接某个字符串的，不能连接不同的字符串，只能重复连接一个字符串多次
Dialogue: 0,0:14:10.21,0:14:28.78,Default,,0,0,0,,现在把这里改成gsub，当然刚刚讲过这种方法结果是一样的，但是速度却更慢
Dialogue: 0,0:14:28.78,0:14:30.78,Default,,0,0,0,,
