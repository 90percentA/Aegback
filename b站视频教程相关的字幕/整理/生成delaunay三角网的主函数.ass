[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1440
PlayResY: 860

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: D:/Downloads/Telegram Desktop/电脑批量测试【原创首发】/新建文件夹/生成delaunay三角网的主函数.mp4
Video File: D:/Downloads/Telegram Desktop/电脑批量测试【原创首发】/新建文件夹/生成delaunay三角网的主函数.mp4
Video AR Mode: 4
Video AR Value: 1.674419
Video Zoom Percent: 0.625000
Scroll Position: 30
Active Line: 36
Video Position: 19121

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,更纱黑体 SC Semibold,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:01:05.61,0:14:09.24,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:14:53.84,0:15:17.38,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:19:06.68,0:19:13.28,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:19:41.84,0:19:47.81,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:20:59.26,0:21:05.89,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:21:30.61,0:21:33.06,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:21:56.94,0:22:05.28,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:24:18.78,0:26:31.99,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:28:55.83,0:29:22.38,Default,,0,0,0,,{\p1\c&H2D2D2D&\bord0\shad0\clip()\pos(461.622,22.86)}m 286 37 l 1221 37 1219 62 292 60
Dialogue: 0,0:14:56.24,0:14:56.29,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(269.408,171.799)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:14:56.29,0:14:57.61,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(275.815,237.46)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:14:57.61,0:14:57.66,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(272.612,223.047)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:14:57.66,0:14:57.69,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(271.01,191.017)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:14:57.69,0:14:57.79,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(269.408,144.574)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:14:57.79,0:14:57.89,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(274.213,107.739)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:14:57.89,0:14:58.34,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(279.019,109.341)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:14:58.34,0:14:58.38,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(269.408,171.799)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:14:58.38,0:14:59.86,Default,,0,0,0,,{\p1\c&H1E1E1E&\bord0\shad0\clip()\pos(277.417,224.648)}m 280 397 l 818 408 813 558 278 570
Dialogue: 0,0:00:00.00,0:00:47.75,Default,,0,0,0,,之前视频讲了delaunay三角网的生成算法和需要用到的辅助函数，现在介绍三角网的主函数怎么写
Dialogue: 0,0:01:09.58,0:01:26.98,Default,,0,0,0,,函数两个参数，第一个填离散点点集，第二个填能包含住该点集所有点的超级三角形，当然之前也\N说了，超级三角形就是有3个点的table，当然每个点都是一个装有该点x坐标y坐标的table
Dialogue: 0,0:01:26.98,0:02:10.99,Default,,0,0,0,,然后之前说了，对于输入的随机点集，需要按x升序排序。所以用一下之前讲过的table.sort函数即\N可。对p这个表排序，这个表里有很多点，每个点都是一个table，比如｛23,66｝，所以sort里给\N自定义函数传入的参数就是两个table，两个table当然没办法比大小，比如传入的是｛23,66｝和\N｛0,-11｝，那么要按x升序排序,所以实际比较的是两个table的第一个元素的大小。当然参数名字随\N便取，显然这里取名是point和next_p，所以就比较point[1]和next_p[1]的大小。
Dialogue: 0,0:02:10.99,0:02:29.38,Default,,0,0,0,,然后当然是之前说的，一开始要建立两个表。一个是用来装最后需要返回的delaunay三角形的表、\N另一个是装临时三角形的表，当然一开始这个表里就需要装一个三角形，也就是超级三角形。
Dialogue: 0,0:02:35.05,0:02:50.99,Default,,0,0,0,,然后开始遍历按x升序排序后的p点集,也就是插入点。然后每一次插入点都重新建立新的table，一\N个用来装需要删除的三角形的索引(下标)，一个是边表、用来装临时的一堆边
Dialogue: 0,0:03:09.05,0:03:24.00,Default,,0,0,0,,然后遍历临时三角形，判断每个三角形的外接圆和此时插入的点p[i]的关系\Ncheck_p函数就是之前讲的，判断点和三角形外接圆关系的函数
Dialogue: 0,0:03:24.00,0:03:40.21,Default,,0,0,0,,然后检查判断的结果。如果是在右侧，则该临时三角形是合法的德劳内三角形，故将该三角形放进\N用来装德劳内三角形的表里，也就是将temp_tri[i1]放进final_tri表里
Dialogue: 0,0:03:40.21,0:03:48.99,Default,,0,0,0,,并且放进去以后这个三角形就应该从临时三角形表里删除，\N所以记录下此时要删除的临时三角形的下标i1
Dialogue: 0,0:03:48.99,0:04:08.99,Default,,0,0,0,,然后如果点在三角形外接圆内部，那么就要重新“划分”，该三角形不是德劳内三角形，需要删除\N和重新连线。所以在边表里装入该三角形的三条边，在idx里记录下要删除的这个三角形的下标
Dialogue: 0,0:04:08.99,0:04:21.98,Default,,0,0,0,,然后如果位置关系是其它的情况，就不做任何改变，所以就没有继续的elseif了
Dialogue: 0,0:04:59.65,0:05:41.41,Default,,0,0,0,,倒着循环idx表,用table.remove删除临时三角形表里需要删除的临时三角形,之前讲过table.remove\N函数怎么用，所以大家肯定知道为什么不是正着循环。那么此时你可能会发现好像没必要用到idx来\N"辅助"删除三角形，因为如果一开始遍历临时三角形表的时候就是倒着的的话，那就可以直接利用\Ntable.remove函数删除需要删除的临时三角形了,而不需要像这样用idx记录下要删除的三角形下标\N所以实际上你也可以不用idx、直接倒着循环temp_tri、用table.remove删除需要删的三角形即可
Dialogue: 0,0:05:41.41,0:06:25.64,Default,,0,0,0,,然后还要利用边表连出新的三角形、并放进临时三角形表里。所以先对边表去重(除根),然后再连线\N出新的三角形。并用for循环把连出的三角形一个个加进temp_tri临时三角形表里。
Dialogue: 0,0:07:28.84,0:07:43.74,Default,,0,0,0,,这就是每一次插入点需要的所有操作。所以等插入完所有点以后,别忘了把临时三角形表里的三角形\N放进德劳内三角形表里。
Dialogue: 0,0:08:29.81,0:08:58.01,Default,,0,0,0,,然后当然是删除德劳内三角形表里和超级三角形有关的三角形。最后返回德劳内三角形表，当然这\N里还返回了p这个表，也就是离散点点集表。
Dialogue: 0,0:08:58.01,0:09:16.51,Default,,0,0,0,,那么这个final_tri里就装有很多三角形，每个三角形都是合法的delaunay三角形。每个三角形都是\N一个装有3个点的table，每个点当然又是装有x坐标和y坐标的table
Dialogue: 0,0:09:16.51,0:09:43.14,Default,,0,0,0,,所以其实函数最后返回的就是两个table。那当然由于你想要的应该是绘图代码，所以还是要利用这\N些装有一堆三角形的table来连成绘图字符串。
Dialogue: 0,0:09:46.88,0:10:30.81,Default,,0,0,0,,所以现在写一个to_draw函数，用来将一个个三角形连成绘图代码。该函数第一个参数输入点集,作\N用就是把这个点集里的点都依次连起来(比如连一个三角形,因为一个三角形就是一个table，就是一\N个装有3个点的点集)。然后函数后面两个参数是设定绘图的平移大小。默认都是0(即不平移)，比如\N我们连三角形绘图代码时，希望三角形的中心在0,0点，所以要平移一下绘图代码，所以需要这后面\N两个参数
Dialogue: 0,0:10:30.81,0:11:16.28,Default,,0,0,0,,后面的tri_center就是用来计算三角形中心的函数,输入一个三角形,也就是输入个装有3个点的table\N然后计算三角形中心很简单。实际上所有多边形都是,中心点x坐标就是多边形所有顶点x坐标的和再\N除以多边形顶点总数、中心点y坐标就是多边形所有顶点y坐标的和再除以多边形顶点总数
Dialogue: 0,0:11:16.28,0:11:25.71,Default,,0,0,0,,所以这里就是直接算了三角形的重心，没必要算个内心(内切圆圆心)什么的
Dialogue: 0,0:11:25.71,0:11:52.44,Default,,0,0,0,,然后现在看polyc.delaunay函数，该函数可输入两个参数，第一个是离散点点集，第二个是针对该\N点集的特大三角形(超级三角形)。第二个参数如果不输入显然就会默认是现在视频中可见的超级三角\N形，这三角形反正够大了，1后面那么多0。
Dialogue: 0,0:11:52.44,0:12:46.58,Default,,0,0,0,,然后当然，利用刚刚讲的tin函数将输入的离散点点集连成一个个delaunay三角形。现在得到的\Nfinal_tri就是装有一堆德劳内三角形的表了，然后就需要遍历该表，对每个三角形连线成绘图代码\N用上to_draw函数。由于这里要三角形绘图代码的中心是0,0点，所以先计算出三角形中心，并在\N用to_draw函数的时候平移一下。把连线出的三角形绘图代码给装进s这个表里，然后由于三角形现\N在中心在0,0点，所以实际用\pos定位的时候需要不同的坐标，所以同时把每个三角形的中心坐标也\N储存起来,并放进cp这个表里,最后函数返回两个表,一个装有一堆三角形绘图代码,一个装相应的中心
Dialogue: 0,0:13:31.61,0:13:46.54,Default,,0,0,0,,这里中心坐标取了一位小数。绘图代码取了2位小数。
Dialogue: 0,0:14:24.58,0:14:34.09,Default,,0,0,0,,来用一用看看
Dialogue: 0,0:14:34.09,0:15:09.11,Default,,0,0,0,,别忘了，函数库需要require加载。如果在utils-auto4.lua里有require过的话，在模板里就没必要\Nrequire了，如果在utils-auto4.lua没有require该函数库的话，就记得在模板里require加载函数库\Nrequire是lua的函数，需要_G.全局调用,除非在kara-templater.lua的tenv表里加入了require函数
Dialogue: 0,0:15:09.11,0:15:21.43,Default,,0,0,0,,用一下之前讲的rand_coor来生成离散点点集。
Dialogue: 0,0:15:43.73,0:15:56.84,Default,,0,0,0,,假设生成50个随机点、随机点的矩形范围是0,0,333,176（即左上角0,0宽333高176）
Dialogue: 0,0:15:56.84,0:16:08.08,Default,,0,0,0,,然后函数返回两个值，一个是生成的随机点集，一个是针对该点集的超级三角形，在现在视频中就\N是xx和ss
Dialogue: 0,0:16:17.31,0:17:00.18,Default,,0,0,0,,delaunay函数，返回装有delaunay三角形绘图代码的表和每个三角形的中心坐标的表，注意这个\N中心坐标的表里，每个中心点都不是｛23,66｝这样的，而是｛x=23,y=66｝这样的，这样主要是\N方便使用，比如现在使用的时候用cc.x和cc.y就可以了。如果存储成｛23,66｝这样的话,用的时候\N就要用cc[1]和cc[2]了，不太方便
Dialogue: 0,0:17:05.71,0:17:14.98,Default,,0,0,0,,oo里装有一堆德劳内三角形的绘图代码，所以循环#oo次
Dialogue: 0,0:17:37.84,0:17:49.38,Default,,0,0,0,,可以看到，这就是50个离散点生成的德劳内三角网。并且当然字幕拖放点在每个三角形绘图中心
Dialogue: 0,0:18:16.01,0:18:33.94,Default,,0,0,0,,因为要生成三角形，所以随机点最少也得有3个
Dialogue: 0,0:19:12.78,0:19:26.11,Default,,0,0,0,,然后看看之前讲的rand_coor2函数，该函数当然也是用来产生随机点，只不过产生的方式不一样
Dialogue: 0,0:19:39.91,0:19:52.01,Default,,0,0,0,,显然现在生成的随机点数量是10*10个，之前也说了一共生成n*n2个离散点。n决定x方向点的密集\N度，n2决定y方向点的密集度。
Dialogue: 0,0:20:07.48,0:20:17.01,Default,,0,0,0,,然后这个就是生成的随机点也会在矩形边界上的效果
Dialogue: 0,0:21:08.34,0:21:29.41,Default,,0,0,0,,然后这里也提供了，在圆形范围生成随机点的函数（其实还有在任意图形范围生成随机点的函数）
Dialogue: 0,0:21:29.41,0:21:41.08,Default,,0,0,0,,因为这里，0,0就是指的圆心了（而不是刚刚那样指的矩形左上角），所以现在生成的三角网位置\N有点不同。
Dialogue: 0,0:24:23.06,0:24:49.74,Default,,0,0,0,,简单讲一下,圆内生成n个点，如何保证随机点在圆内呢，首先x坐标直接从-r开始到r结束(r是半径)\N当然这里函数参数最后一个是设定直径R。x坐标每一次循环都比上一次大，然后根据x坐标，算出\Ny坐标此时的范围(用圆的方程即可)，然后y坐标只需在这个范围随机即可，这便能保证点在圆内。
Dialogue: 0,0:24:49.74,0:25:11.73,Default,,0,0,0,,然后再在圆上生成n2个点，这些点就直接利用圆的参数方程生成一下即可，不过当然要随机一下
Dialogue: 0,0:25:11.73,0:25:33.44,Default,,0,0,0,,所以该函数产生的随机点的个数是n+n2个
Dialogue: 0,0:26:20.54,0:27:01.28,Default,,0,0,0,,然后当然tin函数在函数库里不是local局部函数，所以也可以用。不过刚刚说过，该函数返回的是\N两个table，第一个table里装有很多三角形，但是这些三角形不是绘图代码，而是3个点而已，所以\N如果用tin函数的话，就还需要用上to_draw函数来连出绘图代码才可以。又因为to_draw函数是该\N函数库里的局部函数，所以不能在aeg里用，只能把这代码复制进code行来用to_draw函数
Dialogue: 0,0:27:17.24,0:27:35.14,Default,,0,0,0,,这里该用math.round函数，而不是polyc函数库里定义的局部函数math_round
Dialogue: 0,0:27:47.38,0:28:25.98,Default,,0,0,0,,可以看到，现在因为没有用平移，直接to_draw的，所以字幕拖放点都是一个
Dialogue: 0,0:28:25.98,0:28:27.98,Default,,0,0,0,,
